{"version":3,"sources":["data/databricksTerminology.js","components/DatabaseComparison.js","data/glossaryData.js","components/DataEngineeringGlossary.js","data/serviceCategories.js","components/AwsVsAzureComparison.js","components/DataProcessingFlows.js","App.js","reportWebVitals.js","index.js"],"names":["databricksTerminology","id","term","definition","example","why","DatabaseComparison","expandedItem","setExpandedItem","useState","viewMode","setViewMode","groupedByCategory","category","title","singlestore","databricks","details","metrics","type","description","winner","source","filter","item","_item$metrics","_item$metrics2","_item$metrics3","reduce","acc","push","React","createElement","className","onClick","map","key","Object","entries","_ref","items","toggleExpand","badgeColor","icon","renderMetricsBadge","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","glossaryData","aws","azure","other","DataEngineeringGlossary","categoryFilter","setCategoryFilter","searchTerm","setSearchTerm","categories","name","filteredData","matchesCategory","matchesSearch","toLowerCase","includes","placeholder","value","onChange","e","target","scope","length","idx","_categories$find","find","c","colSpan","serviceCategories","parent","service","children","AwsVsAzureComparison","selectedService","setSelectedService","expandedServices","setExpandedServices","toggleServiceExpansion","categoryIndex","cloud","prev","[object Object]","isServiceExpanded","Fragment","child","childIdx","stopPropagation","style","animation","jsx","flowExplanations","DataProcessingFlows","selectedFlowStep","setSelectedFlowStep","opacity","transition","App","activeTab","setActiveTab","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.91eeb56a.chunk.js","sourcesContent":["const databricksTerminology = [\n  {\n    id: 'delta-lake',\n    term: 'Delta Lake',\n    definition: 'An open-source storage layer that brings ACID transactions to big data workloads.',\n    example: 'When two data engineers update the same customer dataset simultaneously, Delta Lake ensures neither overrides the other\\'s changes.',\n    why: 'Provides reliability and consistency guarantees previously only available in traditional databases.'\n  },\n  {\n    id: 'medallion',\n    term: 'Medallion Architecture',\n    definition: 'A data organization framework using Bronze (raw), Silver (validated), and Gold (aggregated) layers.',\n    example: 'Raw JSON payment transactions go into Bronze, cleansed data with proper types into Silver, and daily merchant summaries into Gold.',\n    why: 'Creates clear separation of concerns and progressive data quality improvement through the pipeline.'\n  },\n  {\n    id: 'lakehouse',\n    term: 'Lakehouse',\n    definition: 'A hybrid architecture combining data lake storage with data warehouse functionality.',\n    example: 'Storing petabytes of raw data while still providing SQL query capabilities and BI tool connectivity.',\n    why: 'Eliminates need for separate systems for different data workloads (analytics, ML, BI).'\n  },\n  {\n    id: 'unity-catalog',\n    term: 'Unity Catalog',\n    definition: 'Unified governance layer for managing data assets across clouds with fine-grained access controls.',\n    example: 'Restricting access to PII columns in customer data while allowing aggregated metrics for analytics teams.',\n    why: 'Centralizes security, auditing, and lineage tracking across all data assets.'\n  },\n  {\n    id: 'photon',\n    term: 'Photon Engine',\n    definition: 'C++ vectorized query execution engine that accelerates Spark workloads without code changes.',\n    example: 'A complex aggregation query runs 5x faster with Photon enabled without modifying any SQL code.',\n    why: 'Delivers significant performance gains for data-intensive workloads, especially for analytics.'\n  },\n  {\n    id: 'delta-live-tables',\n    term: 'Delta Live Tables (DLT)',\n    definition: 'Declarative framework for building reliable data pipelines with quality controls and monitoring.',\n    example: 'Defining data quality expectations like \"all transaction_ids must be unique\" directly in pipeline code.',\n    why: 'Reduces boilerplate code and increases reliability by automating dependency management and quality checks.'\n  },\n  {\n    id: 'mlflow',\n    term: 'MLflow',\n    definition: 'Open-source platform for managing the ML lifecycle including experimentation, reproducibility, and deployment.',\n    example: 'Tracking model parameters, metrics, and artifacts during fraud detection model development.',\n    why: 'Standardizes the machine learning process from experiment to production.'\n  },\n  {\n    id: 'structured-streaming',\n    term: 'Structured Streaming',\n    definition: 'Spark API for continuous data processing with exactly-once guarantees.',\n    example: 'Processing a stream of payment events as they arrive, updating fraud detection models in real-time.',\n    why: 'Enables real-time data processing using the same APIs as batch processing.'\n  },\n  {\n    id: 'z-ordering',\n    term: 'Z-Ordering',\n    definition: 'Physical data organization technique that co-locates related data for faster queries.',\n    example: 'Z-ordering transaction data by date and merchant_id improves filtering performance by 10-100x.',\n    why: 'Optimizes read performance for specific query patterns without requiring index maintenance.'\n  },\n  {\n    id: 'dbus',\n    term: 'DBUs (Databricks Units)',\n    definition: 'Billing units representing compute resources consumed per hour.',\n    example: 'A Standard cluster with 4 cores might consume 0.75 DBUs per hour while running.',\n    why: 'Forms the basis of usage-based pricing model, allowing cost optimization via scaling.'\n  },\n  {\n    id: 'notebooks',\n    term: 'Notebooks',\n    definition: 'Interactive documents combining code, visualizations, and markdown in multiple languages.',\n    example: 'Creating an end-to-end data pipeline with SQL data preparation, Python modeling, and R visualizations in a single notebook.',\n    why: 'Enables collaborative, documented data workflows bridging data engineering and data science.'\n  },\n  {\n    id: 'workspace',\n    term: 'Workspace',\n    definition: 'Collaborative environment for organizing and developing Databricks assets.',\n    example: 'Organizing notebooks into folders for different departments while sharing common utilities.',\n    why: 'Provides team-based collaboration, access controls, and versioning for data assets.'\n  },\n  {\n    id: 'clusters',\n    term: 'Clusters',\n    definition: 'Managed compute resources that execute Databricks workloads with auto-scaling capabilities.',\n    example: 'Setting up an auto-scaling cluster that grows to 20 nodes during peak processing and scales down to 2 during quiet periods.',\n    why: 'Separates storage from compute, allowing flexible scaling based on workload demands.'\n  },\n  {\n    id: 'auto-loader',\n    term: 'Auto Loader',\n    definition: 'Efficient data ingestion service for incrementally processing new files in cloud storage.',\n    example: 'Automatically detecting and processing new transaction log files as they arrive in S3 without explicit listing operations.',\n    why: 'Simplifies data ingestion while optimizing for cost and performance compared to manual approaches.'\n  },\n  {\n    id: 'delta-sharing',\n    term: 'Delta Sharing',\n    definition: 'Open protocol for securely sharing data across organizations regardless of platform.',\n    example: 'Sharing payment transaction aggregates with partner organizations without giving direct access to your data lake.',\n    why: 'Enables secure, efficient data sharing workflows across organizational boundaries.'\n  }\n];\n\nexport default databricksTerminology;\n","import React, { useState } from 'react';\nimport databricksTerminology from '../data/databricksTerminology';\n\nconst DatabaseComparison = () => {\n  // State to track which comparison is expanded\n  const [expandedItem, setExpandedItem] = useState(null);\n  // State for viewing mode\n  const [viewMode, setViewMode] = useState('all');\n\n  // Data for the comparison\n  const comparisonData = [\n    {\n      id: 'primary-design',\n      category: 'Architecture',\n      title: 'Primary Design',\n      singlestore: 'Memory-optimized, transactional database with analytical capabilities',\n      databricks: 'Data lakehouse platform optimized for analytics and ML',\n      details: 'SingleStore was designed as a distributed SQL database that combines in-memory performance with disk-based durability. Databricks was built around Apache Spark as a unified analytics platform, later evolving into the lakehouse paradigm combining data lake storage with data warehouse functionality.',\n      metrics: {\n        type: 'qualitative',\n        description: 'Architectural differences make direct comparison difficult'\n      }\n    },\n    {\n      id: 'data-storage',\n      category: 'Architecture',\n      title: 'Data Storage',\n      singlestore: 'Primarily in-memory with disk persistence',\n      databricks: 'Primarily disk-based with intelligent caching',\n      details: 'SingleStore keeps active data in memory for fast access with disk-based persistence for durability. Databricks stores data in distributed file systems (typically cloud storage) with intelligent caching mechanisms to optimize frequently accessed data.',\n      metrics: {\n        type: 'performance',\n        winner: 'conditional',\n        description: 'SingleStore: Up to 10x faster for point lookups and small queries | Databricks: More cost-effective for large datasets (50-80% lower storage costs)',\n        source: 'Published benchmarks from both vendors'\n      }\n    },\n    {\n      id: 'use-case',\n      category: 'Architecture',\n      title: 'Use Case Strength',\n      singlestore: 'High-throughput OLTP with some OLAP',\n      databricks: 'Primarily OLAP, ML and data engineering',\n      details: 'SingleStore excels at high-throughput transactional workloads while supporting analytical queries. Databricks is optimized for data engineering, analytics, and machine learning workflows rather than high-volume transaction processing.',\n      metrics: {\n        type: 'performance',\n        winner: 'conditional',\n        description: 'SingleStore: Up to 100x faster for high-volume OLTP | Databricks: 2-5x faster for complex analytics queries',\n        source: 'TPC-H and TPC-DS benchmarks'\n      }\n    },\n    {\n      id: 'medallion',\n      category: 'Data Management',\n      title: 'Medallion Architecture',\n      singlestore: 'Would require manual implementation',\n      databricks: 'Native built-in concept',\n      details: 'The bronze-silver-gold medallion architecture is a core Databricks concept, with native tools for implementing each layer. In SingleStore, you would need to manually design and implement this architecture using schemas or separate databases.',\n      metrics: {\n        type: 'efficiency',\n        winner: 'databricks',\n        description: '60-70% reduction in development time for implementing data quality frameworks',\n        source: 'Databricks customer case studies'\n      }\n    },\n    {\n      id: 'query-language',\n      category: 'Development',\n      title: 'Query Language',\n      singlestore: 'SQL',\n      databricks: 'SQL, Python, R, Scala',\n      details: 'SingleStore primarily uses SQL for data manipulation and queries. Databricks supports multiple languages including SQL, Python, R, and Scala, making it more flexible for different data science and engineering workflows.',\n      metrics: {\n        type: 'efficiency',\n        winner: 'databricks',\n        description: 'Multi-language support enables 25-40% broader team collaboration',\n        source: 'Developer productivity studies'\n      }\n    },\n    {\n      id: 'ml-integration',\n      category: 'Development',\n      title: 'Machine Learning',\n      singlestore: 'Limited, requires external tools',\n      databricks: 'Deeply integrated',\n      details: 'Databricks has native ML capabilities with MLflow for experiment tracking, model registry, and deployment workflows. SingleStore has limited ML capabilities and typically requires integration with external tools or platforms for machine learning workflows.',\n      metrics: {\n        type: 'efficiency',\n        winner: 'databricks',\n        description: '3-5x faster ML deployment cycles with MLflow compared to custom integration solutions',\n        source: 'Databricks MLflow documentation and case studies'\n      }\n    },\n    {\n      id: 'scalability',\n      category: 'Performance',\n      title: 'Scalability',\n      singlestore: 'Horizontal scaling via sharding',\n      databricks: 'Elastic compute separate from storage',\n      details: 'SingleStore scales horizontally by adding nodes and distributing data via sharding. Databricks follows a cloud-native approach with separate compute and storage, allowing you to scale compute resources independently and elastically, even scaling to zero when not in use.',\n      metrics: {\n        type: 'cost',\n        winner: 'databricks',\n        description: '30-50% cost savings for variable workloads due to compute elasticity and scaling to zero',\n        source: 'Cloud cost optimization studies'\n      }\n    },\n    {\n      id: 'data-integration',\n      category: 'Connectivity',\n      title: 'Data Integration',\n      singlestore: 'JDBC/ODBC, pipelines for specific sources',\n      databricks: 'Extensive native connectors ecosystem',\n      details: 'Databricks offers extensive connectivity options including native connectors for various data sources, Delta Live Tables for ETL, and Auto Loader for data ingestion. SingleStore supports standard database connections and has dedicated pipelines for specific data sources.',\n      metrics: {\n        type: 'efficiency',\n        winner: 'databricks',\n        description: '40-60% reduction in integration development time',\n        source: 'Databricks partner integration benchmarks'\n      }\n    },\n    {\n      id: 'governance',\n      category: 'Management',\n      title: 'Governance & Security',\n      singlestore: 'Traditional database security model',\n      databricks: 'Unity Catalog with fine-grained controls',\n      details: 'Databricks Unity Catalog provides fine-grained governance across clouds with comprehensive audit logging, lineage tracking, and access controls at the row/column level. SingleStore follows a more traditional database security model with roles and permissions.',\n      metrics: {\n        type: 'efficiency',\n        winner: 'databricks',\n        description: '50-70% reduction in governance setup and maintenance time',\n        source: 'Enterprise security implementation studies'\n      }\n    },\n    {\n      id: 'cost-model',\n      category: 'Management',\n      title: 'Cost Model',\n      singlestore: 'Capacity-based licensing',\n      databricks: 'Compute usage-based pricing',\n      details: 'SingleStore typically uses capacity-based licensing models (RAM/CPU). Databricks follows a usage-based model centered around compute DBUs (Databricks Units), allowing for more flexible scaling based on actual workloads.',\n      metrics: {\n        type: 'cost',\n        winner: 'databricks',\n        description: '20-40% cost reduction for variable workloads with usage-based pricing vs. fixed capacity models',\n        source: 'Cloud cost optimization analyses'\n      }\n    },\n    {\n      id: 'deployment',\n      category: 'Management',\n      title: 'Deployment Options',\n      singlestore: 'Cloud, on-premises, hybrid',\n      databricks: 'Multi-cloud, limited on-premises',\n      details: 'SingleStore offers flexible deployment across cloud platforms, on-premises, and hybrid environments. Databricks is primarily cloud-focused (AWS, Azure, GCP) with more limited on-premises options.',\n      metrics: {\n        type: 'qualitative',\n        winner: 'singlestore',\n        description: 'Greater deployment flexibility for regulated environments',\n        source: 'Vendor documentation'\n      }\n    },\n    {\n      id: 'streaming',\n      category: 'Data Processing',\n      title: 'Streaming Data Support',\n      singlestore: 'Fast ingest, limited processing',\n      databricks: 'Native structured streaming',\n      details: 'Databricks provides native structured streaming capabilities for real-time data processing with exactly-once semantics. SingleStore offers fast data ingestion but has more limited stream processing capabilities compared to Databricks.',\n      metrics: {\n        type: 'performance',\n        winner: 'conditional',\n        description: 'SingleStore: Up to 1M+ rows/sec for simple ingestion | Databricks: Superior for complex stream processing with 2-3x throughput for transformations',\n        source: 'Vendor documentation and streaming benchmarks'\n      }\n    },\n    {\n      id: 'recovery',\n      category: 'Management',\n      title: 'Recovery & Backup',\n      singlestore: 'Traditional backup and restore',\n      databricks: 'Time travel and ACID transactions',\n      details: 'Databricks Delta Lake provides time travel capabilities allowing you to access previous versions of data and ACID transactions for reliability. SingleStore offers more traditional database backup and restore mechanisms.',\n      metrics: {\n        type: 'efficiency',\n        winner: 'databricks',\n        description: 'Up to 90% reduction in recovery time using Delta Lake time travel vs. traditional restore operations',\n        source: 'Databricks Delta Lake documentation'\n      }\n    },\n    {\n      id: 'perf-tuning',\n      category: 'Performance',\n      title: 'Performance Tuning',\n      singlestore: 'Query optimization, indexing, sharding',\n      databricks: 'Query optimization, Delta optimizations, Photon engine',\n      details: 'SingleStore offers traditional database tuning approaches like indexing strategies, query optimization, and data distribution via sharding. Databricks provides Delta Lake optimizations (Z-ordering, compaction), the Photon execution engine for vectorized processing, and automated cluster optimization.',\n      metrics: {\n        type: 'performance',\n        winner: 'databricks',\n        description: 'Photon engine delivers 2-7x performance improvement for data-intensive analytical queries compared to Spark SQL',\n        source: 'Databricks Photon benchmark reports'\n      }\n    },\n    {\n      id: 'community',\n      category: 'Ecosystem',\n      title: 'Community & Ecosystem',\n      singlestore: 'Smaller community, commercial focus',\n      databricks: 'Large open-source ecosystem',\n      details: 'Databricks benefits from the large Apache Spark ecosystem and open-source communities around Delta Lake, MLflow, and other projects. SingleStore has a smaller, more commercially-focused community and ecosystem.',\n      metrics: {\n        type: 'qualitative',\n        winner: 'databricks',\n        description: '10x+ larger developer community and ecosystem',\n        source: 'GitHub activity and community metrics'\n      }\n    },\n    {\n      id: 'etl-capabilities',\n      category: 'Data Processing',\n      title: 'ETL/ELT Capabilities',\n      singlestore: 'Basic transformation during load',\n      databricks: 'Advanced ETL with Delta Live Tables',\n      details: 'Databricks offers Delta Live Tables for declarative ETL pipelines with quality controls, monitoring, and automatic optimization. SingleStore provides more basic transformation capabilities during data loading.',\n      metrics: {\n        type: 'efficiency',\n        winner: 'databricks',\n        description: '40-60% reduction in ETL development time with Delta Live Tables vs. traditional ETL approaches',\n        source: 'Databricks customer case studies'\n      }\n    }\n  ];\n\n  // Toggle expanded state\n  const toggleExpand = (id) => {\n    setExpandedItem(expandedItem === id ? null : id);\n  };\n\n  // Function to render the metrics badge\n  const renderMetricsBadge = (metrics) => {\n    if (!metrics) return null;\n    \n    let badgeColor = \"bg-gray-100 text-gray-800\";\n    let icon = \"⚖️\";\n    \n    if (metrics.winner === 'databricks') {\n      badgeColor = \"bg-purple-100 text-purple-800\";\n      icon = \"🔥\";\n    } else if (metrics.winner === 'singlestore') {\n      badgeColor = \"bg-blue-100 text-blue-800\";\n      icon = \"🔥\";\n    } else if (metrics.winner === 'conditional') {\n      badgeColor = \"bg-yellow-100 text-yellow-800\";\n      icon = \"⚖️\";\n    }\n    \n    return (\n      <div className={`rounded-full px-3 py-1 text-xs font-medium ${badgeColor} flex items-center`}>\n        <span className=\"mr-1\">{icon}</span>\n        {metrics.type === 'performance' ? 'Performance' : \n         metrics.type === 'cost' ? 'Cost Efficiency' : \n         metrics.type === 'efficiency' ? 'Efficiency' : \n         'Comparison'}\n      </div>\n    );\n  };\n\n  // Filter the data based on the view mode\n  const filteredData = comparisonData.filter(item => {\n    if (viewMode === 'all') return true;\n    if (viewMode === 'performance') return item.metrics?.type === 'performance';\n    if (viewMode === 'cost') return item.metrics?.type === 'cost';\n    if (viewMode === 'efficiency') return item.metrics?.type === 'efficiency';\n    return true;\n  });\n\n  // Group the filtered data by category\n  const groupedByCategory = filteredData.reduce((acc, item) => {\n    if (!acc[item.category]) {\n      acc[item.category] = [];\n    }\n    acc[item.category].push(item);\n    return acc;\n  }, {});\n\n  return (\n    <div>\n      {/* Updated header with blue-to-purple gradient */}\n      <div \n        className=\"bg-gradient-to-r from-blue-600 to-purple-600 p-6 rounded-xl shadow-lg mb-4 text-center\"\n      >\n        <h1 className=\"text-3xl font-bold text-white mb-2\">SingleStore vs Databricks</h1>\n        <p className=\"text-white/80\">Interactive Comparison for Data Engineering Teams</p>\n      </div>\n      \n      {/* Filter buttons with improved alignment */}\n      <div className=\"bg-white rounded-lg shadow-md p-6 hover:shadow-xl transition-shadow mb-8\">\n        <div className=\"flex justify-center flex-wrap\">\n          <button \n            onClick={() => setViewMode('all')}\n            className={`px-4 py-2 mx-2 my-1 rounded-lg transition-all duration-200 ${\n              viewMode === 'all' \n                ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white shadow-sm' \n                : 'bg-gray-100 text-gray-700 border border-gray-200 hover:bg-gray-200'\n            }`}>\n            All Comparisons\n          </button>\n          <button \n            onClick={() => setViewMode('performance')}\n            className={`px-4 py-2 mx-2 my-1 rounded-lg transition-all duration-200 ${\n              viewMode === 'performance' \n                ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white shadow-sm' \n                : 'bg-gray-100 text-gray-700 border border-gray-200 hover:bg-gray-200'\n            }`}>\n            Performance\n          </button>\n          <button \n            onClick={() => setViewMode('cost')}\n            className={`px-4 py-2 mx-2 my-1 rounded-lg transition-all duration-200 ${\n              viewMode === 'cost' \n                ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white shadow-sm' \n                : 'bg-gray-100 text-gray-700 border border-gray-200 hover:bg-gray-200'\n            }`}>\n            Cost Efficiency\n          </button>\n          <button \n            onClick={() => setViewMode('efficiency')}\n            className={`px-4 py-2 mx-2 my-1 rounded-lg transition-all duration-200 ${\n              viewMode === 'efficiency' \n                ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white shadow-sm' \n                : 'bg-gray-100 text-gray-700 border border-gray-200 hover:bg-gray-200'\n            }`}>\n            Development Efficiency\n          </button>\n          <button \n            onClick={() => setViewMode('terminology')}\n            className={`px-4 py-2 mx-2 my-1 rounded-lg transition-all duration-200 ${\n              viewMode === 'terminology' \n                ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white shadow-sm' \n                : 'bg-gray-100 text-gray-700 border border-gray-200 hover:bg-gray-200'\n            }`}>\n            Databricks Terms\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"bg-white rounded-lg shadow-md overflow-hidden hover:shadow-xl transition-shadow\">\n        {viewMode === 'terminology' ? (\n          <div className=\"p-6\">\n            <h2 className=\"text-2xl font-semibold mb-4 text-center\">Databricks Terminology</h2>\n            <p className=\"mb-6 text-gray-700 text-center\">Quick reference guide to Databricks concepts and terminology for your team</p>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {databricksTerminology.map(item => (\n                <div key={item.id} className=\"border rounded-lg overflow-hidden\">\n                  <div className=\"bg-purple-100 p-3 border-b\">\n                    <h3 className=\"font-medium text-purple-800\">{item.term}</h3>\n                  </div>\n                  <div className=\"p-4\">\n                    <div className=\"mb-3\">\n                      <div className=\"font-medium text-sm text-gray-700 mb-1\">Definition:</div>\n                      <p>{item.definition}</p>\n                    </div>\n                    \n                    <div className=\"mb-3\">\n                      <div className=\"font-medium text-sm text-gray-700 mb-1\">Example:</div>\n                      <p className=\"text-gray-700\">{item.example}</p>\n                    </div>\n                    \n                    <div>\n                      <div className=\"font-medium text-sm text-gray-700 mb-1\">Why It Matters:</div>\n                      <p className=\"text-gray-700\">{item.why}</p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        ) : (\n          Object.entries(groupedByCategory).map(([category, items]) => (\n            <div key={category} className=\"border-b last:border-b-0\">\n              <h2 className=\"bg-gray-100 font-semibold p-3 text-gray-700\">{category}</h2>\n              \n              {items.map((item) => (\n                <div key={item.id} className=\"border-t border-gray-200 first:border-t-0\">\n                  <div \n                    className={`flex cursor-pointer hover:bg-gray-50 transition-colors ${expandedItem === item.id ? 'bg-blue-50' : ''}`}\n                    onClick={() => toggleExpand(item.id)}\n                  >\n                    <div className=\"w-1/3 p-4 font-medium flex items-center\">\n                      <div>\n                        {item.title}\n                        {item.metrics && (\n                          <div className=\"mt-2\">\n                            {renderMetricsBadge(item.metrics)}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"w-1/3 p-4 border-l border-r border-gray-200\">\n                      <div className=\"text-sm text-blue-800 font-semibold\">SingleStore</div>\n                      <div className=\"mt-1\">{item.singlestore}</div>\n                    </div>\n                    <div className=\"w-1/3 p-4\">\n                      <div className=\"text-sm text-purple-800 font-semibold\">Databricks</div>\n                      <div className=\"mt-1\">{item.databricks}</div>\n                    </div>\n                    <div className=\"flex items-center px-4\">\n                      <svg \n                        className={`w-5 h-5 text-gray-500 transition-transform ${expandedItem === item.id ? 'transform rotate-180' : ''}`} \n                        fill=\"none\" \n                        viewBox=\"0 0 24 24\" \n                        stroke=\"currentColor\"\n                      >\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                      </svg>\n                    </div>\n                  </div>\n                  \n                  {expandedItem === item.id && (\n                    <div className=\"p-4 bg-gray-50 border-t border-gray-200\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div>\n                          <h3 className=\"font-medium mb-2\">Detailed Comparison</h3>\n                          <p className=\"text-gray-700\">{item.details}</p>\n                        </div>\n                        \n                        {item.metrics && (\n                          <div className=\"bg-white p-4 rounded shadow-sm\">\n                            <h3 className=\"font-medium mb-2\">Performance & Efficiency Metrics</h3>\n                            <p className=\"text-gray-700 mb-2\">\n                              {item.metrics.winner === 'databricks' && <span className=\"font-semibold text-purple-700\">Databricks: </span>}\n                              {item.metrics.winner === 'singlestore' && <span className=\"font-semibold text-blue-700\">SingleStore: </span>}\n                              {item.metrics.description}\n                            </p>\n                            <p className=\"text-xs text-gray-500\">Source: {item.metrics.source}</p>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          ))\n        )}\n      </div>\n      \n      <div className=\"mt-6 bg-white p-6 rounded-lg shadow-md hover:shadow-xl transition-shadow\">\n        <h2 className=\"text-lg font-semibold text-gray-800 mb-2\">How to Use This Comparison</h2>\n        <p className=\"text-gray-700\">Click on any row to expand and see detailed information about that specific comparison point. Use the filter buttons above to focus on performance, cost efficiency, or development efficiency metrics. All metrics are based on official vendor documentation, benchmarks, and published case studies.</p>\n        <div className=\"mt-4 bg-yellow-50 border border-yellow-200 p-3 rounded-lg\">\n          <p className=\"text-sm text-yellow-800\">\n            <strong>Note:</strong> Performance and cost metrics can vary significantly based on specific workloads, configurations, and deployment scenarios. These figures represent typical scenarios but your actual results may differ.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DatabaseComparison;","// Data for the engineering glossary\nconst glossaryData = [\n  // FUNDAMENTAL DATA CONCEPTS\n  {\n    category: 'fundamental',\n    term: 'Bit',\n    definition: 'The smallest unit of data, representing a single binary value (0 or 1)',\n    example: 'The number 5 is represented as 101 in binary (4+0+1)',\n    aws: '-',\n    azure: '-',\n    other: '-'\n  },\n  {\n    category: 'fundamental',\n    term: 'Byte',\n    definition: 'A unit of digital information consisting of 8 bits',\n    example: 'The letter \\'A\\' is stored as the byte 01000001 in ASCII encoding',\n    aws: '-',\n    azure: '-',\n    other: '-'\n  },\n  {\n    category: 'fundamental',\n    term: 'Data Type',\n    definition: 'Classification that specifies which type of value a variable has',\n    example: 'Integer: 42, String: \"hello\", Float: 3.14, Boolean: true',\n    aws: '-',\n    azure: '-',\n    other: '-'\n  },\n  {\n    category: 'fundamental',\n    term: 'Structured Data',\n    definition: 'Data that adheres to a pre-defined data model',\n    example: 'Customer records in a database table with fixed columns',\n    aws: 'RDS, DynamoDB',\n    azure: 'Azure SQL DB, Cosmos DB',\n    other: 'Snowflake, MongoDB'\n  },\n  {\n    category: 'fundamental',\n    term: 'Unstructured Data',\n    definition: 'Data that doesn\\'t follow a specific format',\n    example: 'Customer support emails, social media posts, videos',\n    aws: 'S3',\n    azure: 'Blob Storage',\n    other: 'GCS, Hadoop HDFS'\n  },\n  {\n    category: 'fundamental',\n    term: 'Semi-structured Data',\n    definition: 'Data that doesn\\'t conform to a rigid structure but has tags',\n    example: 'JSON payment data with varying fields per transaction',\n    aws: 'DynamoDB, DocumentDB',\n    azure: 'Cosmos DB',\n    other: 'MongoDB, Couchbase'\n  },\n  \n  // STORAGE & COMPUTING CONCEPTS\n  {\n    category: 'storage',\n    term: 'RAM',\n    definition: 'Temporary working memory for active datasets',\n    example: 'SQL query on 4GB of customer data requires at least 4GB RAM',\n    aws: 'EC2 Memory Optimized',\n    azure: 'Azure VM D-series',\n    other: '-'\n  },\n  {\n    category: 'storage',\n    term: 'Disk Storage',\n    definition: 'Persistent storage medium for data',\n    example: 'Transaction logs stored on SSD for long-term retention',\n    aws: 'EBS, S3',\n    azure: 'Managed Disks, Blob Storage',\n    other: 'Google Persistent Disk'\n  },\n  {\n    category: 'storage',\n    term: 'SIMD Processing',\n    definition: 'CPU technique to process multiple data values in a single operation',\n    example: 'Comparing 256 transaction amounts to a threshold at once',\n    aws: '-',\n    azure: '-',\n    other: 'Intel AVX, ARM Neon'\n  },\n  {\n    category: 'storage',\n    term: 'Vectorized Execution',\n    definition: 'Processing batches of data at once rather than row-by-row',\n    example: 'Calculating average of 1000 transactions in a single operation',\n    aws: 'Redshift',\n    azure: 'Synapse Analytics',\n    other: 'Databricks Photon, Snowflake'\n  },\n  \n  // FILE FORMATS & DATA SERIALIZATION\n  {\n    category: 'file',\n    term: 'CSV',\n    definition: 'Comma-separated values, simple text format for tabular data',\n    example: 'name,age,email\\\\nJohn,30,john@example.com',\n    aws: '-',\n    azure: '-',\n    other: '-'\n  },\n  {\n    category: 'file',\n    term: 'JSON',\n    definition: 'JavaScript Object Notation, lightweight data-interchange format',\n    example: '{\"customer\": {\"name\": \"John\", \"orders\": [{\"id\": 1}]}}',\n    aws: '-',\n    azure: '-',\n    other: '-'\n  },\n  {\n    category: 'file',\n    term: 'Parquet',\n    definition: 'Columnar storage file format that compresses data',\n    example: 'A 100GB dataset reduced to 20GB with faster query times',\n    aws: 'AWS Glue, Athena',\n    azure: 'Synapse Analytics',\n    other: 'Databricks, Snowflake'\n  },\n  {\n    category: 'file',\n    term: 'Avro',\n    definition: 'Row-based storage format with schema definition',\n    example: 'Payment transactions with enforced data types',\n    aws: 'MSK (Kafka), Glue',\n    azure: 'HDInsight, Event Hubs',\n    other: 'Confluent Kafka, Databricks'\n  },\n  {\n    category: 'file',\n    term: 'ORC',\n    definition: 'Optimized Row Columnar format, optimized for Hive',\n    example: 'Data warehouse tables storing billions of transactions',\n    aws: 'EMR, Athena',\n    azure: 'HDInsight, Synapse',\n    other: 'Databricks, Hive'\n  },\n  {\n    category: 'file',\n    term: 'Delta Format',\n    definition: 'Open-source format that adds ACID transactions to Parquet',\n    example: 'Multiple data scientists updating the same dataset without conflicts',\n    aws: '-',\n    azure: '-',\n    other: 'Databricks Delta Lake'\n  },\n  \n  // DATABASE CONCEPTS\n  {\n    category: 'database',\n    term: 'RDBMS',\n    definition: 'Relational Database Management System',\n    example: 'PostgreSQL storing customer information in tables',\n    aws: 'RDS, Aurora',\n    azure: 'Azure SQL DB',\n    other: 'Oracle, MySQL, PostgreSQL'\n  },\n  {\n    category: 'database',\n    term: 'NoSQL',\n    definition: 'Database design for non-tabular data models',\n    example: 'Storing customer profiles as flexible JSON documents',\n    aws: 'DynamoDB, DocumentDB',\n    azure: 'Cosmos DB',\n    other: 'MongoDB, Cassandra'\n  },\n  {\n    category: 'database',\n    term: 'OLTP',\n    definition: 'Online Transaction Processing systems',\n    example: 'Payment processing system handling 1000+ TPS',\n    aws: 'RDS, Aurora',\n    azure: 'Azure SQL DB',\n    other: 'Oracle, MySQL'\n  },\n  {\n    category: 'database',\n    term: 'OLAP',\n    definition: 'Online Analytical Processing systems',\n    example: 'Data warehouse generating quarterly reports',\n    aws: 'Redshift',\n    azure: 'Synapse Analytics',\n    other: 'Snowflake, Teradata'\n  },\n  {\n    category: 'database',\n    term: 'Column Storage',\n    definition: 'Storing data by organizing each column separately',\n    example: 'Storing all transaction amounts together for fast aggregation',\n    aws: 'Redshift',\n    azure: 'Synapse Analytics',\n    other: 'Snowflake, ClickHouse'\n  },\n  {\n    category: 'database',\n    term: 'Row Storage',\n    definition: 'Traditional storage method organizing data by rows',\n    example: 'Customer records stored as complete rows',\n    aws: 'RDS, Aurora',\n    azure: 'Azure SQL DB',\n    other: 'MySQL, PostgreSQL'\n  },\n  {\n    category: 'database',\n    term: 'Primary Key (PK)',\n    definition: 'Unique identifier column',\n    example: 'transaction_id in the transaction table',\n    aws: '-',\n    azure: '-',\n    other: '-'\n  },\n  {\n    category: 'database',\n    term: 'Foreign Key (FK)',\n    definition: 'Column that references a primary key in another table',\n    example: 'merchant_id in transactions table',\n    aws: '-',\n    azure: '-',\n    other: '-'\n  },\n  {\n    category: 'database',\n    term: 'Shard',\n    definition: 'A horizontal partition of data',\n    example: 'Customer data split across servers by region',\n    aws: 'DynamoDB, DocumentDB',\n    azure: 'Cosmos DB, SQL DB',\n    other: 'MongoDB Atlas, Citus'\n  },\n  {\n    category: 'database',\n    term: 'Partition',\n    definition: 'Division of a logical database into distinct parts',\n    example: 'Transaction table partitioned by month',\n    aws: 'Redshift, S3',\n    azure: 'Synapse, ADLS',\n    other: 'Snowflake, Hive'\n  },\n\n  // DATA MODELING CONCEPTS\n  {\n    category: 'modeling',\n    term: 'Schema',\n    definition: 'Structure that defines how data is organized',\n    example: 'Payment system tables for transactions, customers, merchants',\n    aws: 'Glue Data Catalog',\n    azure: 'Azure Purview',\n    other: 'Alation, Collibra'\n  },\n  {\n    category: 'modeling',\n    term: 'Star Schema',\n    definition: 'Dimensional model with a central fact table',\n    example: 'Transaction facts connected to customer, date dimensions',\n    aws: 'Redshift',\n    azure: 'Synapse Analytics',\n    other: 'Snowflake, BigQuery'\n  },\n  {\n    category: 'modeling',\n    term: 'Snowflake Schema',\n    definition: 'Extension of star schema with normalized dimensions',\n    example: 'Customer dimension normalized into details and address tables',\n    aws: 'Redshift',\n    azure: 'Synapse Analytics',\n    other: 'Snowflake, Oracle'\n  },\n  {\n    category: 'modeling',\n    term: 'Dimensional Modeling',\n    definition: 'Organizing data into measures and dimensions',\n    example: 'Payment amounts (measures) by time, location (dimensions)',\n    aws: '-',\n    azure: '-',\n    other: '-'\n  },\n  {\n    category: 'modeling',\n    term: 'Data Vault',\n    definition: 'Enterprise data warehouse modeling methodology',\n    example: 'Hubs, links, and satellites for payment data',\n    aws: '-',\n    azure: '-',\n    other: '-'\n  },\n  \n  // DATA WAREHOUSE & LAKES\n  {\n    category: 'warehouse',\n    term: 'Data Warehouse',\n    definition: 'Repository for structured, filtered data',\n    example: 'Cleaned transaction data optimized for reporting',\n    aws: 'Redshift',\n    azure: 'Synapse Analytics',\n    other: 'Snowflake, BigQuery'\n  },\n  {\n    category: 'warehouse',\n    term: 'Data Lake',\n    definition: 'Repository for vast amounts of raw data',\n    example: 'S3 bucket with clickstream, logs, and customer interactions',\n    aws: 'S3 + Lake Formation',\n    azure: 'ADLS Gen2',\n    other: 'GCS + Dataproc'\n  },\n  {\n    category: 'warehouse',\n    term: 'Data Lakehouse',\n    definition: 'Hybrid approach combining lake storage with warehouse functionality',\n    example: 'Analyzing both structured and raw logs',\n    aws: 'Redshift Spectrum',\n    azure: 'Synapse Analytics',\n    other: 'Databricks Lakehouse'\n  },\n  {\n    category: 'warehouse',\n    term: 'ETL',\n    definition: 'Extract, Transform, Load process',\n    example: 'Extracting payment data, standardizing formats',\n    aws: 'Glue, Data Pipeline',\n    azure: 'Data Factory',\n    other: 'Informatica, Talend'\n  },\n  {\n    category: 'warehouse',\n    term: 'ELT',\n    definition: 'Extract, Load, Transform variation',\n    example: 'Loading raw logs to lake, transforming with SQL',\n    aws: 'Glue, Athena',\n    azure: 'Data Factory, Synapse',\n    other: 'Databricks, dbt'\n  },\n  {\n    category: 'warehouse',\n    term: 'Data Mart',\n    definition: 'Subset of a data warehouse for a specific business line',\n    example: 'Finance-specific view focused on revenue and chargebacks',\n    aws: 'Redshift',\n    azure: 'Synapse Analytics',\n    other: 'Snowflake'\n  },\n  \n  // DATA PROCESSING CONCEPTS\n  {\n    category: 'processing',\n    term: 'Batch Processing',\n    definition: 'Processing data in large groups at intervals',\n    example: 'Daily job processing previous day\\'s transactions',\n    aws: 'Batch, EMR',\n    azure: 'Batch Service, HDInsight',\n    other: 'Databricks, Spark'\n  },\n  {\n    category: 'processing',\n    term: 'Stream Processing',\n    definition: 'Processing data continuously as it\\'s generated',\n    example: 'Real-time fraud detection for each transaction',\n    aws: 'Kinesis, MSK',\n    azure: 'Event Hubs, Stream Analytics',\n    other: 'Kafka, Flink'\n  },\n  {\n    category: 'processing',\n    term: 'Micro-batch',\n    definition: 'Processing data in small, near-continuous batches',\n    example: 'Aggregating transactions in 5-minute windows',\n    aws: 'Kinesis',\n    azure: 'Stream Analytics',\n    other: 'Spark Structured Streaming'\n  },\n  {\n    category: 'processing',\n    term: 'Real-time Processing',\n    definition: 'Processing data immediately as it arrives',\n    example: 'Instant payment notification to customer',\n    aws: 'Lambda + Kinesis',\n    azure: 'Functions + Event Hubs',\n    other: 'Flink, Kafka Streams'\n  },\n  {\n    category: 'processing',\n    term: 'MapReduce',\n    definition: 'Programming model for large distributed data processing',\n    example: 'Counting occurrences of each product in transactions',\n    aws: 'EMR',\n    azure: 'HDInsight',\n    other: 'Hadoop, Spark'\n  },\n  {\n    category: 'processing',\n    term: 'DAG (Directed Acyclic Graph)',\n    definition: 'Workflow with task dependencies',\n    example: 'ETL pipeline showing validation before transformation',\n    aws: 'Step Functions',\n    azure: 'Logic Apps',\n    other: 'Airflow, Prefect, Dagster'\n  },\n  \n  // CLOUD & DISTRIBUTED COMPUTING\n  {\n    category: 'cloud',\n    term: 'Distributed Computing',\n    definition: 'System with components on different networked computers',\n    example: 'Payment processing across multiple servers',\n    aws: '-',\n    azure: '-',\n    other: '-'\n  },\n  {\n    category: 'cloud',\n    term: 'Horizontal Scaling',\n    definition: 'Adding more machines to handle increased load',\n    example: 'Adding 5 new database servers for Black Friday',\n    aws: 'Auto Scaling Groups',\n    azure: 'VMSS',\n    other: 'Kubernetes'\n  },\n  {\n    category: 'cloud',\n    term: 'Vertical Scaling',\n    definition: 'Adding more power to an existing machine',\n    example: 'Upgrading analytics server from 16GB to 64GB RAM',\n    aws: 'EC2 Instance Resize',\n    azure: 'VM Resize',\n    other: '-'\n  },\n  {\n    category: 'cloud',\n    term: 'Container',\n    definition: 'Lightweight, standalone executable package',\n    example: 'Payment microservice in Docker container',\n    aws: 'ECS, EKS',\n    azure: 'AKS, Container Instances',\n    other: 'Docker, Kubernetes'\n  },\n  {\n    category: 'cloud',\n    term: 'Kubernetes',\n    definition: 'System for managing containerized applications',\n    example: 'Auto-scaling payment containers based on volume',\n    aws: 'EKS',\n    azure: 'AKS',\n    other: 'GKE, OpenShift'\n  },\n  {\n    category: 'cloud',\n    term: 'Microservices',\n    definition: 'Application as collection of loosely coupled services',\n    example: 'Separate services for payment processing, fraud detection',\n    aws: 'ECS, EKS, Lambda',\n    azure: 'AKS, Functions',\n    other: 'Kubernetes, Docker'\n  },\n  \n  // DATABRICKS CORE CONCEPTS\n  {\n    category: 'databricks',\n    term: 'Delta Lake',\n    definition: 'Storage layer with ACID transactions for big data',\n    example: 'Two analysts updating the same dataset without conflicts',\n    aws: '-',\n    azure: '-',\n    other: 'Databricks Delta Lake'\n  },\n  {\n    category: 'databricks',\n    term: 'Medallion Architecture',\n    definition: 'Bronze (raw), Silver (validated), Gold (aggregated) layers',\n    example: 'Raw JSON payments in Bronze, cleansed in Silver, summaries in Gold',\n    aws: '-',\n    azure: '-',\n    other: 'Databricks'\n  },\n  {\n    category: 'databricks',\n    term: 'Lakehouse',\n    definition: 'Hybrid architecture combining lake storage with warehouse functionality',\n    example: 'Petabytes of raw data with SQL query capabilities',\n    aws: '-',\n    azure: '-',\n    other: 'Databricks Lakehouse'\n  },\n  {\n    category: 'databricks',\n    term: 'Unity Catalog',\n    definition: 'Unified governance layer with fine-grained access controls',\n    example: 'Restricting PII access while allowing aggregate metrics',\n    aws: 'Glue/Lake Formation',\n    azure: 'Purview',\n    other: 'Databricks Unity Catalog'\n  },\n  {\n    category: 'databricks',\n    term: 'Photon Engine',\n    definition: 'C++ vectorized query engine for Spark',\n    example: 'Complex query running 5x faster with Photon',\n    aws: '-',\n    azure: '-',\n    other: 'Databricks Photon'\n  },\n  {\n    category: 'databricks',\n    term: 'Delta Live Tables (DLT)',\n    definition: 'Framework for reliable pipelines with quality controls',\n    example: 'Enforcing \"all transaction_ids must be unique\" rule',\n    aws: '-',\n    azure: '-',\n    other: 'Databricks DLT'\n  },\n  {\n    category: 'databricks',\n    term: 'MLflow',\n    definition: 'Platform for managing the ML lifecycle',\n    example: 'Tracking fraud detection model development parameters',\n    aws: 'SageMaker',\n    azure: 'Azure ML',\n    other: 'MLflow, Weights & Biases'\n  },\n  {\n    category: 'databricks',\n    term: 'Structured Streaming',\n    definition: 'Spark API for continuous data processing',\n    example: 'Processing payment events in real-time, updating models',\n    aws: '-',\n    azure: '-',\n    other: 'Spark Structured Streaming'\n  },\n  {\n    category: 'databricks',\n    term: 'Z-Ordering',\n    definition: 'Technique that co-locates related data for faster queries',\n    example: 'Z-ordering by date and merchant_id for 10-100x speed',\n    aws: '-',\n    azure: '-',\n    other: 'Databricks'\n  },\n  {\n    category: 'databricks',\n    term: 'DBUs (Databricks Units)',\n    definition: 'Billing units for compute resources',\n    example: '4-core cluster consuming 0.75 DBUs per hour',\n    aws: '-',\n    azure: '-',\n    other: 'Databricks'\n  },\n  {\n    category: 'databricks',\n    term: 'Notebooks',\n    definition: 'Interactive documents with code, visualizations, markdown',\n    example: 'End-to-end payment analysis notebook',\n    aws: 'SageMaker Notebooks',\n    azure: 'Azure Notebooks',\n    other: 'Jupyter, Databricks, Colab'\n  },\n  {\n    category: 'databricks',\n    term: 'Workspace',\n    definition: 'Collaborative environment for organizing assets',\n    example: 'Organizing notebooks into department folders',\n    aws: '-',\n    azure: '-',\n    other: 'Databricks Workspace'\n  },\n  {\n    category: 'databricks',\n    term: 'Clusters',\n    definition: 'Managed compute resources for workloads',\n    example: 'Auto-scaling cluster for peak processing',\n    aws: 'EMR',\n    azure: 'HDInsight, Synapse',\n    other: 'Databricks'\n  },\n  {\n    category: 'databricks',\n    term: 'Auto Loader',\n    definition: 'Ingestion service for incrementally processing new files',\n    example: 'Automatically processing new transaction log files',\n    aws: '-',\n    azure: '-',\n    other: 'Databricks Auto Loader'\n  },\n\n  // ADVANCED DATA ENGINEERING CONCEPTS\n  {\n    category: 'advanced',\n    term: 'Data Lineage',\n    definition: 'Documentation of data\\'s origins and transformations',\n    example: 'Tracing payment metric back to source systems',\n    aws: 'Glue, AWS CloudTrail',\n    azure: 'Purview',\n    other: 'Collibra, Alation'\n  },\n  {\n    category: 'advanced',\n    term: 'Data Governance',\n    definition: 'Framework for managing data availability, security',\n    example: 'Policies for PII access and protection',\n    aws: 'Lake Formation',\n    azure: 'Purview',\n    other: 'Collibra, Alation'\n  },\n  {\n    category: 'advanced',\n    term: 'Data Catalog',\n    definition: 'Inventory of available data assets',\n    example: 'Directory of payment datasets with descriptions',\n    aws: 'Glue Data Catalog',\n    azure: 'Purview',\n    other: 'Collibra, Alation'\n  },\n  {\n    category: 'advanced',\n    term: 'Data Quality',\n    definition: 'Measure of data\\'s condition and suitability',\n    example: 'Percentage of transactions with valid customer_ids',\n    aws: 'Glue DataBrew',\n    azure: 'Data Factory Data Flows',\n    other: 'Great Expectations, dbt'\n  },\n  {\n    category: 'advanced',\n    term: 'Schema Evolution',\n    definition: 'Changing schema without disrupting services',\n    example: 'Adding payment_method field without breaking pipelines',\n    aws: 'Glue Schema Registry',\n    azure: 'Schema Registry',\n    other: 'Confluent Schema Registry'\n  },\n  {\n    category: 'advanced',\n    term: 'CDC (Change Data Capture)',\n    definition: 'Capturing changes made to a database',\n    example: 'Tracking all customer address updates',\n    aws: 'DMS',\n    azure: 'Data Factory',\n    other: 'Debezium, Striim'\n  },\n  {\n    category: 'advanced',\n    term: 'Idempotence',\n    definition: 'Operation can be applied multiple times without changing result',\n    example: 'Payment processing that doesn\\'t double-charge',\n    aws: '-',\n    azure: '-',\n    other: '-'\n  },\n  {\n    category: 'advanced',\n    term: 'ACID Properties',\n    definition: 'Guaranteeing database transactions',\n    example: 'Funds transfer completes entirely or not at all',\n    aws: '-',\n    azure: '-',\n    other: '-'\n  },\n  {\n    category: 'advanced',\n    term: 'Slowly Changing Dimensions',\n    definition: 'Handling historical data changes in a warehouse',\n    example: 'Tracking merchant information changes over time',\n    aws: '-',\n    azure: '-',\n    other: '-'\n  },\n  \n  // PLATFORM-SPECIFIC CONCEPTS\n  {\n    category: 'platform',\n    term: 'S3 (AWS)',\n    definition: 'Simple Storage Service, object storage',\n    example: 'Storing transaction logs in encrypted bucket',\n    aws: 'S3',\n    azure: '-',\n    other: '-'\n  },\n  {\n    category: 'platform',\n    term: 'Blob Storage (Azure)',\n    definition: 'Microsoft\\'s object storage solution',\n    example: 'Archiving payment receipts',\n    aws: '-',\n    azure: 'Blob Storage',\n    other: '-'\n  },\n  {\n    category: 'platform',\n    term: 'Redshift (AWS)',\n    definition: 'Cloud data warehouse service',\n    example: 'Weekly settlement reports across merchant data',\n    aws: 'Redshift',\n    azure: '-',\n    other: '-'\n  },\n  {\n    category: 'platform',\n    term: 'Synapse Analytics (Azure)',\n    definition: 'Analytics service for data warehousing and big data',\n    example: 'Combining transactions with clickstream analysis',\n    aws: '-',\n    azure: 'Synapse Analytics',\n    other: '-'\n  },\n  {\n    category: 'platform',\n    term: 'Glue (AWS)',\n    definition: 'Serverless data integration service',\n    example: 'Cataloging payment data sources',\n    aws: 'Glue',\n    azure: '-',\n    other: '-'\n  },\n  {\n    category: 'platform',\n    term: 'Data Factory (Azure)',\n    definition: 'Integration service for ETL/ELT workflows',\n    example: 'Moving data from payment systems to data lake',\n    aws: '-',\n    azure: 'Data Factory',\n    other: '-'\n  },\n  {\n    category: 'platform',\n    term: 'Athena (AWS)',\n    definition: 'Interactive query service for S3 data',\n    example: 'Ad-hoc fraud analysis queries against S3 data',\n    aws: 'Athena',\n    azure: '-',\n    other: '-'\n  },\n  {\n    category: 'platform',\n    term: 'EMR (AWS)',\n    definition: 'Managed Hadoop framework',\n    example: 'Monthly reconciliation across historical data',\n    aws: 'EMR',\n    azure: '-',\n    other: '-'\n  },\n  {\n    category: 'platform',\n    term: 'Lambda (AWS)',\n    definition: 'Serverless compute service',\n    example: 'Real-time payment validation functions',\n    aws: 'Lambda',\n    azure: '-',\n    other: '-'\n  },\n  {\n    category: 'platform',\n    term: 'Azure Functions',\n    definition: 'Microsoft\\'s serverless compute',\n    example: 'Fraud detection triggers on transactions',\n    aws: '-',\n    azure: 'Azure Functions',\n    other: '-'\n  }\n];\n\nexport default glossaryData;","import React, { useState } from 'react';\nimport glossaryData from '../data/glossaryData';\n\nconst DataEngineeringGlossary = () => {\n  const [categoryFilter, setCategoryFilter] = useState('all');\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // Define the categories for filtering\n  const categories = [\n    { id: 'all', name: 'All Categories' },\n    { id: 'fundamental', name: 'Fundamental Concepts' },\n    { id: 'storage', name: 'Storage & Computing' },\n    { id: 'file', name: 'File Formats' },\n    { id: 'database', name: 'Database Concepts' },\n    { id: 'modeling', name: 'Data Modeling' },\n    { id: 'warehouse', name: 'Warehouses & Lakes' },\n    { id: 'processing', name: 'Data Processing' },\n    { id: 'cloud', name: 'Cloud Computing' },\n    { id: 'databricks', name: 'Databricks' },\n    { id: 'advanced', name: 'Advanced Concepts' },\n    { id: 'platform', name: 'Platform-Specific' }\n  ];\n\n  // Filter the glossary data based on category and search term\n  const filteredData = glossaryData.filter(item => {\n    const matchesCategory = categoryFilter === 'all' || item.category === categoryFilter;\n    const matchesSearch = \n      item.term.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      item.definition.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      item.example.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      item.aws.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      item.azure.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      item.other.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    return matchesCategory && matchesSearch;\n  });\n\n  // Removed toggle expanded functionality since all info is visible in the table\n\n  return (\n    <div>\n      {/* Simplified gradient header with blue-to-purple gradient */}\n      <div \n        className=\"bg-gradient-to-r from-blue-600 to-purple-600 p-6 rounded-xl shadow-lg mb-4 text-center\"\n      >\n        <h1 className=\"text-3xl font-bold text-white mb-2\">Data Engineering Glossary</h1>\n        <p className=\"text-white/80\">From Bits to Big Data: Interactive Guide to Data Engineering Terms</p>\n      </div>\n      \n      {/* Search and filter controls with improved alignment */}\n      <div className=\"bg-white p-6 rounded-t-lg shadow-md hover:shadow-xl transition-shadow mb-0\">\n        <div className=\"flex flex-col md:flex-row gap-4\">\n          <div className=\"flex-1\">\n            <input\n              type=\"text\"\n              placeholder=\"Search terms, definitions, examples...\"\n              className=\"w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n            />\n          </div>\n          <div className=\"flex flex-wrap justify-center\">\n            {categories.map(category => (\n              <button\n                key={category.id}\n                onClick={() => setCategoryFilter(category.id)}\n                className={`px-4 py-2 mx-2 my-1 rounded-lg transition-all duration-200 ${\n                  categoryFilter === category.id \n                    ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white shadow-sm' \n                    : 'bg-gray-100 text-gray-700 border border-gray-200 hover:bg-gray-200'\n                }`}\n              >\n                {category.name}\n              </button>\n            ))}\n          </div>\n        </div>\n      </div>\n      \n      {/* Glossary table - replaced grid with table layout */}\n      <div className=\"bg-white shadow-lg rounded-b-lg overflow-x-auto mb-4\">\n        <table className=\"min-w-full divide-y divide-gray-200\">\n          <thead>\n            <tr className=\"bg-gradient-to-r from-gray-50 to-gray-100\">\n              <th scope=\"col\" className=\"px-4 py-3 text-left text-sm font-semibold text-gray-700\">Term</th>\n              <th scope=\"col\" className=\"px-4 py-3 text-left text-sm font-semibold text-gray-700\">Definition</th>\n              <th scope=\"col\" className=\"px-4 py-3 text-left text-sm font-semibold text-gray-700\">Example</th>\n              <th scope=\"col\" className=\"px-4 py-3 text-left text-sm font-semibold text-gray-700\">AWS</th>\n              <th scope=\"col\" className=\"px-4 py-3 text-left text-sm font-semibold text-gray-700\">Azure</th>\n              <th scope=\"col\" className=\"px-4 py-3 text-left text-sm font-semibold text-gray-700\">Other</th>\n            </tr>\n          </thead>\n          <tbody className=\"divide-y divide-gray-200 bg-white\">\n            {filteredData.length > 0 ? (\n              filteredData.map((item, idx) => (\n                <tr \n                  key={item.term}\n                  className={`hover:bg-blue-50 transition-colors ${idx % 2 === 0 ? 'bg-white' : 'bg-gray-50'}`}\n                >\n                  <td className=\"px-4 py-3\">\n                    <div className=\"flex flex-col\">\n                      <span className=\"font-medium text-gray-900\">{item.term}</span>\n                      <span className=\"text-xs text-blue-600 mt-1\">\n                        {categories.find(c => c.id === item.category)?.name}\n                      </span>\n                    </div>\n                  </td>\n                  <td className=\"px-4 py-3 text-sm text-gray-600\">{item.definition}</td>\n                  <td className=\"px-4 py-3 text-sm text-gray-600\">{item.example}</td>\n                  <td className=\"px-4 py-3\">\n                    {item.aws !== '-' ? (\n                      <span className=\"inline-block px-2 py-1 text-xs bg-orange-50 text-orange-800 rounded-md\">\n                        {item.aws}\n                      </span>\n                    ) : (\n                      <span className=\"text-gray-400\">-</span>\n                    )}\n                  </td>\n                  <td className=\"px-4 py-3\">\n                    {item.azure !== '-' ? (\n                      <span className=\"inline-block px-2 py-1 text-xs bg-blue-50 text-blue-800 rounded-md\">\n                        {item.azure}\n                      </span>\n                    ) : (\n                      <span className=\"text-gray-400\">-</span>\n                    )}\n                  </td>\n                  <td className=\"px-4 py-3\">\n                    {item.other !== '-' ? (\n                      <span className=\"inline-block px-2 py-1 text-xs bg-purple-50 text-purple-800 rounded-md\">\n                        {item.other}\n                      </span>\n                    ) : (\n                      <span className=\"text-gray-400\">-</span>\n                    )}\n                  </td>\n                </tr>\n              ))\n            ) : (\n              <tr>\n                <td colSpan=\"6\" className=\"px-4 py-8 text-center text-gray-500\">\n                  No terms found matching your criteria. Try adjusting your search or filter.\n                </td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n      \n      <div className=\"bg-white p-6 rounded-lg shadow-md hover:shadow-xl transition-shadow\">\n        <h2 className=\"text-lg font-semibold text-gray-800 mb-2\">Using This Glossary</h2>\n        <p className=\"text-gray-700\">\n          Use the search bar to find specific terms or examples. Filter by category to focus on specific areas of data engineering. Each term includes practical examples and platform-specific implementations where applicable.\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default DataEngineeringGlossary;","// Group services by category and map AWS to Azure equivalents\nconst serviceCategories = [\n  {\n    category: 'Storage',\n    aws: {\n      parent: { \n        service: 'S3', \n        description: 'Scalable object storage for data lakes', \n        category: 'Storage'\n      },\n      children: []\n    },\n    azure: {\n      parent: { \n        service: 'Azure Storage', \n        description: 'Comprehensive cloud storage solution', \n        category: 'Storage'\n      },\n      children: [\n        { \n          service: 'Blob Storage', \n          description: 'Object storage for unstructured data in data lakes', \n          category: 'Storage',\n        },\n        { \n          service: 'Storage Containers', \n          description: 'Logical containers for organizing blobs', \n          category: 'Storage',\n        },\n        { \n          service: 'Azure Files', \n          description: 'Fully managed file shares in the cloud', \n          category: 'Storage',\n        }\n      ]\n    }\n  },\n  {\n    category: 'Streaming',\n    aws: {\n      parent: { \n        service: 'Apache Kafka', \n        description: 'Open-source distributed event streaming platform', \n        category: 'Streaming'\n      },\n      children: [\n        { \n          service: 'Kinesis', \n          description: 'Real-time data streaming service similar to Kafka', \n          category: 'Streaming'\n        }\n      ]\n    },\n    azure: {\n      parent: { \n        service: 'Apache Kafka', \n        description: 'Open-source distributed event streaming platform', \n        category: 'Streaming'\n      },\n      children: []\n    }\n  },\n  {\n    category: 'ETL',\n    aws: {\n      parent: { \n        service: 'Glue', \n        description: 'Serverless ETL service for data preparation', \n        category: 'ETL'\n      },\n      children: []\n    },\n    azure: {\n      parent: { \n        service: 'Data Factory', \n        description: 'Data integration service for ETL/ELT workflows', \n        category: 'ETL'\n      },\n      children: []\n    }\n  },\n  {\n    category: 'Analytics',\n    aws: {\n      parent: { \n        service: 'EMR', \n        description: 'Managed Spark service (alternative to Databricks)', \n        category: 'Analytics'\n      },\n      children: []\n    },\n    azure: {\n      parent: { \n        service: 'Azure Databricks', \n        description: 'Analytics platform based on Apache Spark', \n        category: 'Analytics'\n      },\n      children: [\n        { \n          service: 'Delta Lake', \n          description: 'Open source storage layer for reliable data lakes', \n          category: 'Storage',\n        },\n        { \n          service: 'Medallion Architecture', \n          description: 'Bronze (raw), Silver (filtered), Gold (aggregated) data layers', \n          category: 'Architecture',\n        }\n      ]\n    }\n  },\n  {\n    category: 'Data Warehouse',\n    aws: {\n      parent: { \n        service: 'Redshift', \n        description: 'Petabyte-scale data warehouse for analytics', \n        category: 'Analytics'\n      },\n      children: []\n    },\n    azure: {\n      parent: { \n        service: 'Azure Synapse Analytics', \n        description: 'Analytics service for big data and data warehousing', \n        category: 'Analytics'\n      },\n      children: []\n    }\n  },\n  {\n    category: 'Data Processing',\n    aws: {\n      parent: { \n        service: 'Snowflake', \n        description: 'Cloud data platform for warehousing and analytics', \n        category: 'Analytics'\n      },\n      children: []\n    },\n    azure: {\n      parent: null,\n      children: []\n    }\n  },\n  {\n    category: 'Transformation',\n    aws: {\n      parent: { \n        service: 'DBT', \n        description: 'Data build tool for analytics engineering', \n        category: 'Processing'\n      },\n      children: []\n    },\n    azure: {\n      parent: null,\n      children: []\n    }\n  },\n  {\n    category: 'Visualization',\n    aws: {\n      parent: { \n        service: 'Amplitude', \n        description: 'Product analytics platform for insights', \n        category: 'Analytics'\n      },\n      children: []\n    },\n    azure: {\n      parent: { \n        service: 'Power BI', \n        description: 'Business analytics service for visualizations', \n        category: 'Analytics'\n      },\n      children: []\n    }\n  },\n  {\n    category: 'Monitoring',\n    aws: {\n      parent: { \n        service: 'CloudWatch', \n        description: 'Monitoring and observability service', \n        category: 'Monitoring'\n      },\n      children: []\n    },\n    azure: {\n      parent: { \n        service: 'Azure Monitor', \n        description: 'Full stack monitoring service for applications and infrastructure', \n        category: 'Monitoring'\n      },\n      children: []\n    }\n  },\n  {\n    category: 'Container Services',\n    aws: {\n      parent: { \n        service: 'ECS', \n        description: 'Fully managed container orchestration service', \n        category: 'Compute'\n      },\n      children: []\n    },\n    azure: {\n      parent: { \n        service: 'Azure Container Instances', \n        description: 'Run containers without managing servers', \n        category: 'Compute'\n      },\n      children: []\n    }\n  },\n  {\n    category: 'Virtual Machines',\n    aws: {\n      parent: { \n        service: 'EC2', \n        description: 'Virtual servers in the cloud', \n        category: 'Compute'\n      },\n      children: []\n    },\n    azure: {\n      parent: { \n        service: 'Azure Virtual Machines', \n        description: 'Windows or Linux virtual machines in the cloud', \n        category: 'Compute'\n      },\n      children: []\n    }\n  },\n  {\n    category: 'Identity',\n    aws: {\n      parent: { \n        service: 'IAM', \n        description: 'Identity and access management', \n        category: 'Security'\n      },\n      children: []\n    },\n    azure: {\n      parent: { \n        service: 'Azure Active Directory', \n        description: 'Identity and access management service', \n        category: 'Security'\n      },\n      children: []\n    }\n  },\n  {\n    category: 'Secrets',\n    aws: {\n      parent: { \n        service: 'Secrets Manager', \n        description: 'Rotate, manage, and retrieve secrets', \n        category: 'Security'\n      },\n      children: []\n    },\n    azure: {\n      parent: { \n        service: 'Azure Key Vault', \n        description: 'Safeguard cryptographic keys and secrets', \n        category: 'Security'\n      },\n      children: []\n    }\n  },\n  {\n    category: 'Query',\n    aws: {\n      parent: { \n        service: 'Athena', \n        description: 'Serverless interactive query service', \n        category: 'Analytics'\n      },\n      children: []\n    },\n    azure: {\n      parent: null,\n      children: []\n    }\n  },\n  {\n    category: 'Serverless',\n    aws: {\n      parent: { \n        service: 'Lambda', \n        description: 'Serverless compute service', \n        category: 'Compute'\n      },\n      children: []\n    },\n    azure: {\n      parent: { \n        service: 'Azure Functions', \n        description: 'Event-driven serverless compute platform', \n        category: 'Compute'\n      },\n      children: []\n    }\n  }\n];\n\nexport default serviceCategories;","import React, { useState } from 'react';\nimport serviceCategories from '../data/serviceCategories';\n\nconst AwsVsAzureComparison = () => {\n  const [selectedService, setSelectedService] = useState(null);\n  const [expandedServices, setExpandedServices] = useState({});\n\n  // Toggle expansion of a service category\n  const toggleServiceExpansion = (categoryIndex, cloud) => {\n    const key = `${cloud}-${categoryIndex}`;\n    setExpandedServices(prev => ({\n      ...prev,\n      [key]: !prev[key]\n    }));\n  };\n\n  // Check if a service is expanded\n  const isServiceExpanded = (categoryIndex, cloud) => {\n    const key = `${cloud}-${categoryIndex}`;\n    return !!expandedServices[key];\n  };\n\n  // Animation style helpers (instead of framer-motion variants)\n  const getAnimationStyle = (isVisible) => ({\n    opacity: isVisible ? 1 : 0,\n    transform: `translateY(${isVisible ? 0 : 20}px)`,\n    transition: 'opacity 0.3s, transform 0.3s',\n  });\n\n  // Helper for hover animations\n  const getHoverStyle = (e, scale = true) => {\n    if (scale) {\n      e.currentTarget.style.transform = 'scale(1.02)';\n    } else {\n      e.currentTarget.style.transform = 'none';\n    }\n  };\n\n  return (\n    <div>\n      {/* Header with blue-to-purple gradient */}\n      <div \n        className=\"bg-gradient-to-r from-blue-600 to-purple-600 p-6 rounded-xl shadow-lg mb-4 text-center\"\n      >\n        <h1 className=\"text-3xl font-bold text-white mb-2\">AWS vs Azure: Data Engineering Solutions</h1>\n        <p className=\"text-white/80\">Interactive comparison of cloud data processing and Databricks integration</p>\n      </div>\n\n      {/* Services Comparison Table */}\n      <div className=\"bg-white rounded-lg shadow-md p-6 hover:shadow-xl transition-shadow mb-4\">\n        <h2 className=\"text-2xl font-semibold mb-4 text-center\">Cloud Services Comparison</h2>\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full\">\n            <thead>\n              <tr>\n                <th className=\"px-4 py-2 border-b-2 text-left\">Category</th>\n                <th className=\"px-4 py-2 border-b-2 text-left bg-amber-50\">AWS Services</th>\n                <th className=\"px-4 py-2 border-b-2 text-left bg-blue-50\">Azure Services</th>\n              </tr>\n            </thead>\n            <tbody>\n              {serviceCategories.map((category, idx) => (\n                <React.Fragment key={`category-${idx}`}>\n                  {/* Category row */}\n                  <tr className=\"border-b hover:bg-gray-50\">\n                    <td className=\"px-4 py-3 font-medium\">{category.category}</td>\n                    \n                    {/* AWS Service */}\n                    <td className=\"px-4 py-3 bg-amber-50/30\">\n                      {category.aws.parent ? (\n                        <div \n                          className=\"cursor-pointer flex justify-between items-center\"\n                          onClick={() => category.aws.children.length > 0 && toggleServiceExpansion(idx, 'aws')}\n                        >\n                          <div>\n                            <div className=\"font-semibold text-amber-800\">{category.aws.parent.service}</div>\n                            <div className=\"text-xs text-gray-600\">{category.aws.parent.description}</div>\n                          </div>\n                          {category.aws.children.length > 0 && (\n                            <span className=\"text-amber-600\">\n                              {isServiceExpanded(idx, 'aws') ? '▼' : '▶'}\n                            </span>\n                          )}\n                        </div>\n                      ) : (\n                        <div className=\"text-gray-400 italic\">No equivalent service</div>\n                      )}\n                    </td>\n                    \n                    {/* Azure Service */}\n                    <td className=\"px-4 py-3 bg-blue-50/30\">\n                      {category.azure.parent ? (\n                        <div \n                          className=\"cursor-pointer flex justify-between items-center\"\n                          onClick={() => category.azure.children.length > 0 && toggleServiceExpansion(idx, 'azure')}\n                        >\n                          <div>\n                            <div className=\"font-semibold text-blue-800\">{category.azure.parent.service}</div>\n                            <div className=\"text-xs text-gray-600\">{category.azure.parent.description}</div>\n                          </div>\n                          {category.azure.children.length > 0 && (\n                            <span className=\"text-blue-600\">\n                              {isServiceExpanded(idx, 'azure') ? '▼' : '▶'}\n                            </span>\n                          )}\n                        </div>\n                      ) : (\n                        <div className=\"text-gray-400 italic\">No equivalent service</div>\n                      )}\n                    </td>\n                  </tr>\n\n                  {/* AWS Sub-services */}\n                  {isServiceExpanded(idx, 'aws') && category.aws.children.map((child, childIdx) => (\n                    <tr key={`aws-child-${idx}-${childIdx}`} className=\"border-b bg-amber-50/10\">\n                      <td className=\"px-4 py-2\"></td>\n                      <td className=\"px-4 py-2 pl-8\">\n                        <div className=\"font-medium text-sm\">{child.service}</div>\n                        <div className=\"text-xs text-gray-600\">{child.description}</div>\n                      </td>\n                      <td></td>\n                    </tr>\n                  ))}\n\n                  {/* Azure Sub-services */}\n                  {isServiceExpanded(idx, 'azure') && category.azure.children.map((child, childIdx) => (\n                    <tr key={`azure-child-${idx}-${childIdx}`} className=\"border-b bg-blue-50/10\">\n                      <td className=\"px-4 py-2\"></td>\n                      <td></td>\n                      <td className=\"px-4 py-2 pl-8\">\n                        <div className=\"font-medium text-sm\">{child.service}</div>\n                        <div className=\"text-xs text-gray-600\">{child.description}</div>\n                      </td>\n                    </tr>\n                  ))}\n                </React.Fragment>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Service Details Modal */}\n      {selectedService && (\n        <div \n          className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\" \n          onClick={() => setSelectedService(null)}\n        >\n          <div \n            className=\"bg-white p-6 rounded-lg max-w-md\"\n            onClick={(e) => e.stopPropagation()}\n            style={{ animation: 'scaleIn 0.2s ease-out' }}\n          >\n            <h3 className=\"text-xl font-semibold mb-2\">{selectedService.service}</h3>\n            <p className=\"text-gray-600\">{selectedService.description}</p>\n            <p className=\"text-sm text-gray-500 mt-2\">Category: {selectedService.category}</p>\n            <button\n              className=\"mt-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n              onClick={() => setSelectedService(null)}\n            >\n              Close\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* CSS animation for modal only - removed flowchart specific styles */}\n      <style jsx>{`\n        @keyframes scaleIn {\n          from { transform: scale(0.9); opacity: 0; }\n          to { transform: scale(1); opacity: 1; }\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default AwsVsAzureComparison;","import React, { useState } from 'react';\n\n// Flow step explanations\nconst flowExplanations = {\n  // AWS Flow\n  'Simplex CC': {\n    title: 'Simplex CC',\n    description: 'Source application generating transaction data and events',\n    details: 'The starting point of data collection, where raw transaction data is generated and captured for processing.'\n  },\n  'Kafka': {\n    title: 'Apache Kafka',\n    description: 'Event streaming platform for high-throughput data pipelines',\n    details: 'Manages real-time data streams and provides a buffer between data producers and consumers. Integrates with both S3 for storage and directly with processing services.'\n  },\n  'S3': {\n    title: 'Amazon S3',\n    description: 'Object storage for raw and processed data',\n    details: 'Stores the raw data from Kafka in a durable, highly available storage layer. Acts as the data lake for all incoming transaction data.'\n  },\n  'Snowflake': {\n    title: 'Snowflake',\n    description: 'Cloud data warehouse for analytics',\n    details: 'Processes and transforms the raw data from S3 into structured, queryable datasets ready for analysis.'\n  },\n  'DBT': {\n    title: 'DBT (Data Build Tool)',\n    description: 'Transformation and modeling tool',\n    details: 'Applies business logic, data cleaning, and transformations to prepare the data for analytics consumption.'\n  },\n  'Amplitude': {\n    title: 'Amplitude',\n    description: 'Product analytics platform',\n    details: 'Provides insights, visualizations, and analytics on the processed data for business users and stakeholders.'\n  },\n  \n  // Azure Flow\n  'Nuvei App': {\n    title: 'Nuvei App',\n    description: 'Payment processing application',\n    details: 'Payment processing application that generates events and data that need to be processed and analyzed.'\n  },\n  'Azure Storage': {\n    title: 'Azure Blob Storage',\n    description: 'Scalable object storage for data lakes',\n    details: 'Stores raw data from Kafka as well as processed data from Databricks in a hierarchical namespace using containers and directories.'\n  },\n  'Databricks': {\n    title: 'Azure Databricks',\n    description: 'Apache Spark-based analytics platform',\n    details: 'Processes data using Spark, combines Delta Lake for reliability, and enables data science workloads with collaborative notebooks and ML workflows.'\n  },\n  'Power BI': {\n    title: 'Power BI',\n    description: 'Business intelligence and visualization tool',\n    details: 'Connects to Databricks to visualize processed data and deliver insights to business users through interactive dashboards.'\n  }\n};\n\nconst DataProcessingFlows = () => {\n  const [selectedFlowStep, setSelectedFlowStep] = useState(null);\n\n  // Helper for hover animations\n  const getHoverStyle = (e, scale = true) => {\n    if (scale) {\n      e.currentTarget.style.transform = 'scale(1.02)';\n    } else {\n      e.currentTarget.style.transform = 'none';\n    }\n  };\n\n  return (\n    <div>\n      {/* Header with purple-to-blue gradient */}\n      <div \n        className=\"bg-gradient-to-r from-blue-600 to-purple-600 p-6 rounded-xl shadow-lg mb-4 text-center\"\n      >\n        <h1 className=\"text-3xl font-bold text-white mb-2\">Data Processing Flows</h1>\n        <p className=\"text-white/80\">Compare cloud data processing pipelines across AWS and Azure</p>\n      </div>\n\n      {/* Flow Charts */}\n      <div className=\"bg-white rounded-lg shadow-md p-6 hover:shadow-xl transition-shadow\">\n        <h2 className=\"text-2xl font-semibold mb-4 text-center\">Pipeline Architecture Comparison</h2>\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* AWS Flow */}\n          <div\n            className=\"flex flex-col items-center border border-amber-100 rounded-lg p-6 bg-amber-50/30\"\n            style={{ opacity: 1, transition: 'opacity 0.3s' }}\n          >\n            <h3 className=\"text-lg font-semibold text-amber-600 mb-6\">AWS Data Pipeline</h3>\n            <div className=\"relative flex flex-col items-center w-full\">\n              {/* Simplex CC */}\n              <div \n                className=\"flow-step bg-gradient-to-r from-amber-100 to-amber-200 border border-amber-300\"\n                onClick={() => setSelectedFlowStep(flowExplanations['Simplex CC'])}\n              >\n                <div className=\"font-semibold\">Simplex CC</div>\n                <div className=\"text-xs\">Transaction data source</div>\n              </div>\n              \n              <div className=\"flow-connector\">\n                <div className=\"flow-arrow text-amber-500\">▼</div>\n                <div className=\"flow-description\">Emits events & transactions</div>\n              </div>\n              \n              {/* Kafka */}\n              <div \n                className=\"flow-step bg-gradient-to-r from-amber-100 to-amber-200 border border-amber-300\"\n                onClick={() => setSelectedFlowStep(flowExplanations['Kafka'])}\n              >\n                <div className=\"font-semibold\">Apache Kafka</div>\n                <div className=\"text-xs\">Real-time event streaming</div>\n              </div>\n              \n              <div className=\"flow-connector\">\n                <div className=\"flow-arrow text-amber-500\">▼</div>\n                <div className=\"flow-description\">Buffers & streams data</div>\n              </div>\n              \n              {/* S3 */}\n              <div \n                className=\"flow-step bg-gradient-to-r from-amber-100 to-amber-200 border border-amber-300\"\n                onClick={() => setSelectedFlowStep(flowExplanations['S3'])}\n              >\n                <div className=\"font-semibold\">Amazon S3</div>\n                <div className=\"text-xs\">Raw data storage</div>\n              </div>\n              \n              <div className=\"flow-connector\">\n                <div className=\"flow-arrow text-amber-500\">▼</div>\n                <div className=\"flow-description\">Provides data access</div>\n              </div>\n              \n              {/* Snowflake */}\n              <div \n                className=\"flow-step bg-gradient-to-r from-amber-100 to-amber-200 border border-amber-300\"\n                onClick={() => setSelectedFlowStep(flowExplanations['Snowflake'])}\n              >\n                <div className=\"font-semibold\">Snowflake</div>\n                <div className=\"text-xs\">Data processing & warehousing</div>\n              </div>\n              \n              <div className=\"flow-connector\">\n                <div className=\"flow-arrow text-amber-500\">▼</div>\n                <div className=\"flow-description\">Transforms & structures data</div>\n              </div>\n              \n              {/* DBT */}\n              <div \n                className=\"flow-step bg-gradient-to-r from-amber-100 to-amber-200 border border-amber-300\"\n                onClick={() => setSelectedFlowStep(flowExplanations['DBT'])}\n              >\n                <div className=\"font-semibold\">DBT</div>\n                <div className=\"text-xs\">Data modeling & transformation</div>\n              </div>\n              \n              <div className=\"flow-connector\">\n                <div className=\"flow-arrow text-amber-500\">▼</div>\n                <div className=\"flow-description\">Prepares for consumption</div>\n              </div>\n              \n              {/* Amplitude */}\n              <div \n                className=\"flow-step bg-gradient-to-r from-amber-100 to-amber-200 border border-amber-300\"\n                onClick={() => setSelectedFlowStep(flowExplanations['Amplitude'])}\n              >\n                <div className=\"font-semibold\">Amplitude</div>\n                <div className=\"text-xs\">Analytics & visualization</div>\n              </div>\n            </div>\n          </div>\n\n          {/* Azure Flow */}\n          <div\n            className=\"flex flex-col items-center border border-blue-100 rounded-lg p-6 bg-blue-50/30\"\n            style={{ opacity: 1, transition: 'opacity 0.3s' }}\n          >\n            <h3 className=\"text-lg font-semibold text-blue-600 mb-6\">Azure Data Pipeline</h3>\n            <div className=\"relative flex flex-col items-center w-full\">\n              {/* Nuvei App */}\n              <div \n                className=\"flow-step bg-gradient-to-r from-blue-100 to-blue-200 border border-blue-300\"\n                onClick={() => setSelectedFlowStep(flowExplanations['Nuvei App'])}\n              >\n                <div className=\"font-semibold\">Nuvei App</div>\n                <div className=\"text-xs\">Payment processing application</div>\n              </div>\n              \n              <div className=\"flow-connector\">\n                <div className=\"flow-arrow text-blue-500\">▼</div>\n                <div className=\"flow-description\">Generates payment events</div>\n              </div>\n              \n              {/* Kafka */}\n              <div \n                className=\"flow-step bg-gradient-to-r from-blue-100 to-blue-200 border border-blue-300\"\n                onClick={() => setSelectedFlowStep(flowExplanations['Kafka'])}\n              >\n                <div className=\"font-semibold\">Apache Kafka</div>\n                <div className=\"text-xs\">Real-time event ingestion</div>\n              </div>\n              \n              <div className=\"flow-connector\">\n                <div className=\"flow-arrow text-blue-500\">▼</div>\n                <div className=\"flow-description\">Captures & forwards events</div>\n              </div>\n              \n              {/* Azure Storage */}\n              <div \n                className=\"flow-step bg-gradient-to-r from-blue-100 to-blue-200 border border-blue-300\"\n                onClick={() => setSelectedFlowStep(flowExplanations['Azure Storage'])}\n              >\n                <div className=\"font-semibold\">Azure Blob Storage</div>\n                <div className=\"text-xs\">Raw data storage in containers</div>\n              </div>\n              \n              <div className=\"flow-connector\">\n                <div className=\"flow-arrow text-blue-500\">▼</div>\n                <div className=\"flow-description\">Provides persistent storage</div>\n              </div>\n              \n              {/* Databricks */}\n              <div \n                className=\"flow-step bg-gradient-to-r from-blue-100 to-blue-200 border border-blue-300\"\n                onClick={() => setSelectedFlowStep(flowExplanations['Databricks'])}\n              >\n                <div className=\"font-semibold\">Azure Databricks</div>\n                <div className=\"text-xs\">Processing with Delta Lake</div>\n              </div>\n              \n              <div className=\"flow-connector\">\n                <div className=\"flow-arrow text-blue-500\">▼</div>\n                <div className=\"flow-description\">Bronze → Silver → Gold medallion layers</div>\n              </div>\n              \n              {/* Power BI */}\n              <div \n                className=\"flow-step bg-gradient-to-r from-blue-100 to-blue-200 border border-blue-300\"\n                onClick={() => setSelectedFlowStep(flowExplanations['Power BI'])}\n              >\n                <div className=\"font-semibold\">Power BI</div>\n                <div className=\"text-xs\">Business intelligence & dashboards</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"bg-white rounded-lg shadow-md mt-4 p-6\">\n        <h2 className=\"text-2xl font-semibold mb-4 text-center\">Key Processing Differences</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div className=\"border rounded-lg p-4\">\n            <h3 className=\"text-lg font-medium text-amber-800 mb-2\">AWS Processing Approach</h3>\n            <ul className=\"list-disc pl-4 space-y-2 text-gray-700\">\n              <li>Uses third-party tools like Snowflake and DBT for data transformation</li>\n              <li>S3 serves as the central data lake foundation</li>\n              <li>More focus on custom pipelines with specialized tools</li>\n              <li>Separate tools for visualization (Amplitude) and processing (Snowflake)</li>\n              <li>Analytics separated from data storage and processing layers</li>\n            </ul>\n          </div>\n          <div className=\"border rounded-lg p-4\">\n            <h3 className=\"text-lg font-medium text-blue-800 mb-2\">Azure Processing Approach</h3>\n            <ul className=\"list-disc pl-4 space-y-2 text-gray-700\">\n              <li>Databricks provides an integrated platform for processing and analytics</li>\n              <li>Built-in medallion architecture (Bronze/Silver/Gold) for data quality</li>\n              <li>Delta Lake provides ACID transactions on the data lake</li>\n              <li>Tighter integration between storage (ADLS) and compute (Databricks)</li>\n              <li>Power BI offers native connectivity to the processing layer</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n\n      {/* Flow Step Details Modal */}\n      {selectedFlowStep && (\n        <div \n          className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\" \n          onClick={() => setSelectedFlowStep(null)}\n        >\n          <div \n            className=\"bg-white p-6 rounded-lg max-w-md w-full\"\n            onClick={(e) => e.stopPropagation()}\n            style={{ animation: 'scaleIn 0.2s ease-out' }}\n          >\n            <h3 className=\"text-xl font-semibold mb-2\">{selectedFlowStep.title}</h3>\n            <p className=\"text-gray-600 font-medium\">{selectedFlowStep.description}</p>\n            <div className=\"mt-4 p-4 bg-gray-50 rounded-lg\">\n              <p className=\"text-gray-700\">{selectedFlowStep.details}</p>\n            </div>\n            <button\n              className=\"mt-4 px-4 py-2 bg-gradient-to-r from-purple-600 to-blue-600 text-white rounded hover:bg-blue-700\"\n              onClick={() => setSelectedFlowStep(null)}\n            >\n              Close\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Add CSS for flow chart */}\n      <style jsx>{`\n        .flow-step {\n          width: 180px;\n          padding: 12px;\n          border-radius: 8px;\n          text-align: center;\n          box-shadow: 0 2px 4px rgba(0,0,0,0.05);\n          margin: 0 auto 8px auto;\n          cursor: pointer;\n          transition: transform 0.2s, box-shadow 0.2s;\n          display: block;\n          max-width: 100%;\n        }\n        \n        .flow-step:hover {\n          transform: translateY(-2px);\n          box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n        }\n        \n        .flow-connector {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          height: 60px;\n          justify-content: center;\n          margin-bottom: 8px;\n          width: 100%;\n        }\n        \n        .flow-arrow {\n          font-size: 20px;\n          margin-bottom: 4px;\n        }\n        \n        .flow-description {\n          background: #f8fafc;\n          font-size: 11px;\n          padding: 4px 8px;\n          border-radius: 12px;\n          color: #64748b;\n          border: 1px dashed #cbd5e1;\n          text-align: center;\n          max-width: 90%;\n        }\n\n        @keyframes scaleIn {\n          from { transform: scale(0.9); opacity: 0; }\n          to { transform: scale(1); opacity: 1; }\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default DataProcessingFlows;\n","import React, { useState } from 'react';\nimport DatabaseComparison from './components/DatabaseComparison';\nimport DataEngineeringGlossary from './components/DataEngineeringGlossary';\nimport AwsVsAzureComparison from './components/AwsVsAzureComparison';\nimport DataProcessingFlows from './components/DataProcessingFlows';\nimport './App.css';\n\nfunction App() {\n  // State to track active tab\n  const [activeTab, setActiveTab] = useState('comparison');\n\n  return (\n    <div className=\"App bg-gray-50 min-h-screen\">\n      {/* Blue-to-purple gradient for the main tabs */}\n      <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 p-6 flex justify-center shadow-md\">\n        <div className=\"flex justify-center w-full max-w-6xl mx-auto flex-wrap\">\n          <button \n            onClick={() => setActiveTab('comparison')} \n            className={`px-6 py-3 mx-2 my-1 rounded-lg text-lg font-medium transition-all duration-200 shadow-md ${\n              activeTab === 'comparison' \n                ? 'bg-white text-blue-700 transform scale-105' \n                : 'bg-blue-500/30 text-white hover:bg-blue-500/50'\n            }`}\n          >\n            Database Comparison\n          </button>\n          <button \n            onClick={() => setActiveTab('glossary')} \n            className={`px-6 py-3 mx-2 my-1 rounded-lg text-lg font-medium transition-all duration-200 shadow-md ${\n              activeTab === 'glossary' \n                ? 'bg-white text-blue-700 transform scale-105' \n                : 'bg-blue-500/30 text-white hover:bg-blue-500/50'\n            }`}\n          >\n            Data Engineering Glossary\n          </button>\n          <button \n            onClick={() => setActiveTab('aws-vs-azure')} \n            className={`px-6 py-3 mx-2 my-1 rounded-lg text-lg font-medium transition-all duration-200 shadow-md ${\n              activeTab === 'aws-vs-azure' \n                ? 'bg-white text-blue-700 transform scale-105' \n                : 'bg-blue-500/30 text-white hover:bg-blue-500/50'\n            }`}\n          >\n            AWS vs Azure\n          </button>\n          <button \n            onClick={() => setActiveTab('data-flows')} \n            className={`px-6 py-3 mx-2 my-1 rounded-lg text-lg font-medium transition-all duration-200 shadow-md ${\n              activeTab === 'data-flows' \n                ? 'bg-white text-blue-700 transform scale-105' \n                : 'bg-blue-500/30 text-white hover:bg-blue-500/50'\n            }`}\n          >\n            Processing Flows\n          </button>\n        </div>\n      </div>\n\n      {/* Container with consistent max width and padding */}\n      <div className=\"container max-w-6xl mx-auto p-6\">\n        {/* Render the active component */}\n        {activeTab === 'comparison' && <DatabaseComparison />}\n        {activeTab === 'glossary' && <DataEngineeringGlossary />}\n        {activeTab === 'aws-vs-azure' && <AwsVsAzureComparison />}\n        {activeTab === 'data-flows' && <DataProcessingFlows />}\n      </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  \n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}